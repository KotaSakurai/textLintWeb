{"version":3,"sources":["../src/textlint-rule-ja-no-mixed-period.js"],"names":["RuleHelper","require","japaneseRegExp","classicPeriodMarkPattern","checkEndsWithPeriod","defaultOptions","periodMark","allowPeriodMarks","allowEmojiAtEnd","forceAppendPeriod","reporter","context","options","Syntax","RuleError","report","fixer","getSource","helper","preferPeriodMark","concat","undefined","ignoredNodeTypes","ListItem","Link","Code","Image","BlockQuote","Emphasis","Paragraph","node","isChildNode","lastNode","children","length","type","Str","lastStrText","test","periodMarks","allowEmoji","valid","index","fix","replaceTextRange","module","exports","linter"],"mappings":"AAAA;AACA;;;;AACA,IAAMA,aAAaC,QAAQ,sBAAR,EAAgCD,UAAnD;AACA,IAAME,iBAAiB,0FAAvB;AACA;;;;;AAKA,IAAMC,2BAA2B,OAAjC;AACA,IAAMC,sBAAsBH,QAAQ,wBAAR,CAA5B;AACA,IAAMI,iBAAiB;AACnB;AACAC,gBAAY,GAFO;AAGnB;AACA;AACA;AACAC,sBAAkB,EANC;AAOnB;AACAC,qBAAiB,KARE;AASnB;AACA;AACAC,uBAAmB;AAXA,CAAvB;AAaA,IAAMC,WAAW,SAAXA,QAAW,CAACC,OAAD,EAA2B;AAAA,QAAjBC,OAAiB,uEAAP,EAAO;AAAA,QAChCC,MADgC,GACgBF,OADhB,CAChCE,MADgC;AAAA,QACxBC,SADwB,GACgBH,OADhB,CACxBG,SADwB;AAAA,QACbC,MADa,GACgBJ,OADhB,CACbI,MADa;AAAA,QACLC,KADK,GACgBL,OADhB,CACLK,KADK;AAAA,QACEC,SADF,GACgBN,OADhB,CACEM,SADF;;AAExC,QAAMC,SAAS,IAAIlB,UAAJ,CAAeW,OAAf,CAAf;AACA;AACA,QAAMQ,mBAAmBP,QAAQN,UAAR,IAAsBD,eAAeC,UAA9D;AACA;AACA,QAAMC,mBAAmB,CAACK,QAAQL,gBAAR,IAA4BF,eAAeE,gBAA5C,EAA8Da,MAA9D,CAAqED,gBAArE,CAAzB;AACA,QAAMX,kBAAkBI,QAAQJ,eAAR,KAA4Ba,SAA5B,GAClBT,QAAQJ,eADU,GAElBH,eAAeG,eAFrB;AAGA,QAAMC,oBAAoBG,QAAQH,iBAAR,KAA8BY,SAA9B,GACpBT,QAAQH,iBADY,GAEpBJ,eAAeI,iBAFrB;;AAIA,QAAMa,mBAAmB,CACrBT,OAAOU,QADc,EACJV,OAAOW,IADH,EACSX,OAAOY,IADhB,EACsBZ,OAAOa,KAD7B,EACoCb,OAAOc,UAD3C,EACuDd,OAAOe,QAD9D,CAAzB;AAGA,+BACKf,OAAOgB,SADZ,YACuBC,IADvB,EAC4B;AACpB,YAAIZ,OAAOa,WAAP,CAAmBD,IAAnB,EAAyBR,gBAAzB,CAAJ,EAAgD;AAC5C;AACH;AACD,YAAMU,WAAWF,KAAKG,QAAL,CAAcH,KAAKG,QAAL,CAAcC,MAAd,GAAuB,CAArC,CAAjB;AACA,YAAIF,aAAaX,SAAb,IAA0BW,SAASG,IAAT,KAAkBtB,OAAOuB,GAAvD,EAA4D;AACxD;AACH;AACD,YAAMC,cAAcpB,UAAUe,QAAV,CAApB;AACA,YAAIK,YAAYH,MAAZ,KAAuB,CAA3B,EAA8B;AAC1B;AACH;AACD;AACA,YAAI,CAAChC,eAAeoC,IAAf,CAAoBD,WAApB,CAAL,EAAuC;AACnC;AACH;;AAfmB,mCAgBiBjC,oBAAoBiC,WAApB,EAAiC;AAClEE,yBAAahC,gBADqD;AAElEiC,wBAAYhC;AAFsD,SAAjC,CAhBjB;AAAA,YAgBZiC,KAhBY,wBAgBZA,KAhBY;AAAA,YAgBLnC,UAhBK,wBAgBLA,UAhBK;AAAA,YAgBOoC,KAhBP,wBAgBOA,KAhBP;AAoBpB;;;AACA,YAAID,KAAJ,EAAW;AACP;AACH;AACD;AACA,YAAI,KAAKH,IAAL,CAAUhC,UAAV,CAAJ,EAA2B;AACvBS,mBAAOiB,QAAP,EAAiB,IAAIlB,SAAJ,0BAAqBK,gBAArB,qKAAoE;AACjFuB,4BADiF;AAEjFC,qBAAK3B,MAAM4B,gBAAN,CAAuB,CAACF,KAAD,EAAQA,QAAQpC,WAAW4B,MAA3B,CAAvB,EAA2D,EAA3D;AAF4E,aAApE,CAAjB;AAIA;AACH;AACD;AACA;AACA,YAAI/B,yBAAyBmC,IAAzB,CAA8BhC,UAA9B,CAAJ,EAA+C;AAC3CS,mBAAOiB,QAAP,EAAiB,IAAIlB,SAAJ,0BAAqBK,gBAArB,qEAAoD;AACjEuB,uBAAOA,KAD0D;AAEjEC,qBAAK3B,MAAM4B,gBAAN,CAAuB,CAACF,KAAD,EAAQA,QAAQvB,iBAAiBe,MAAjC,CAAvB,EAAiEf,gBAAjE;AAF4D,aAApD,CAAjB;AAIH,SALD,MAKO;AACH;AACA,gBAAIV,iBAAJ,EAAuB;AACnB;AACAM,uBAAOiB,QAAP,EAAiB,IAAIlB,SAAJ,0BAAqBK,gBAArB,qEAAoD;AACjEuB,2BAAOA,KAD0D;AAEjEC,yBAAK3B,MAAM4B,gBAAN,CAAuB,CAACF,QAAQ,CAAT,EAAYA,QAAQ,CAApB,CAAvB,EAA+CvB,gBAA/C;AAF4D,iBAApD,CAAjB;AAIH,aAND,MAMO;AACHJ,uBAAOiB,QAAP,EAAiB,IAAIlB,SAAJ,0BAAqBK,gBAArB,qEAAoD;AACjEuB,2BAAOA;AAD0D,iBAApD,CAAjB;AAGH;AACJ;AACJ,KAtDL;AAwDH,CAzED;;AA2EAG,OAAOC,OAAP,GAAiB;AACbC,YAAQrC,QADK;AAEbM,WAAON;AAFM,CAAjB","file":"textlint-rule-ja-no-mixed-period.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst RuleHelper = require(\"textlint-rule-helper\").RuleHelper;\nconst japaneseRegExp = /(?:[々〇〻\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF]|[\\uD840-\\uD87F][\\uDC00-\\uDFFF]|[ぁ-んァ-ヶ])/;\n/***\n * 典型的な句点のパターン\n * これは`periodMark`と交換しても違和感がないものを登録\n * @type {RegExp}\n */\nconst classicPeriodMarkPattern = /[。\\.]/;\nconst checkEndsWithPeriod = require(\"check-ends-with-period\");\nconst defaultOptions = {\n    // 優先する句点文字\n    periodMark: \"。\",\n    // 句点文字として許可する文字列の配列\n    // 例外として許可したい文字列を設定する\n    // `periodMark`に指定したものは自動的に許可リストに加わる\n    allowPeriodMarks: [],\n    // 末尾に絵文字を置くことを許可するか\n    allowEmojiAtEnd: false,\n    // 句点で終わって無い場合に`periodMark`を--fix時に追加するかどうか\n    // デフォルトでは自動的に追加しない\n    forceAppendPeriod: false\n};\nconst reporter = (context, options = {}) => {\n    const { Syntax, RuleError, report, fixer, getSource } = context;\n    const helper = new RuleHelper(context);\n    // 優先する句点記号\n    const preferPeriodMark = options.periodMark || defaultOptions.periodMark;\n    // 優先する句点記号は常に句点として許可される\n    const allowPeriodMarks = (options.allowPeriodMarks || defaultOptions.allowPeriodMarks).concat(preferPeriodMark);\n    const allowEmojiAtEnd = options.allowEmojiAtEnd !== undefined\n        ? options.allowEmojiAtEnd\n        : defaultOptions.allowEmojiAtEnd;\n    const forceAppendPeriod = options.forceAppendPeriod !== undefined\n        ? options.forceAppendPeriod\n        : defaultOptions.forceAppendPeriod;\n\n    const ignoredNodeTypes = [\n        Syntax.ListItem, Syntax.Link, Syntax.Code, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis\n    ];\n    return {\n        [Syntax.Paragraph](node){\n            if (helper.isChildNode(node, ignoredNodeTypes)) {\n                return;\n            }\n            const lastNode = node.children[node.children.length - 1];\n            if (lastNode === undefined || lastNode.type !== Syntax.Str) {\n                return;\n            }\n            const lastStrText = getSource(lastNode);\n            if (lastStrText.length === 0) {\n                return;\n            }\n            // 日本語が含まれていない文章は無視する\n            if (!japaneseRegExp.test(lastStrText)) {\n                return;\n            }\n            const { valid, periodMark, index } = checkEndsWithPeriod(lastStrText, {\n                periodMarks: allowPeriodMarks,\n                allowEmoji: allowEmojiAtEnd\n            });\n            // 問題が無い場合は何もしない\n            if (valid) {\n                return;\n            }\n            // 文末がスペースである場合はスペースを削除する\n            if (/\\s/.test(periodMark)) {\n                report(lastNode, new RuleError(`文末が\"${preferPeriodMark}\"で終わっていません。末尾に不要なスペースがあります。`, {\n                    index,\n                    fix: fixer.replaceTextRange([index, index + periodMark.length], \"\")\n                }));\n                return\n            }\n            // 典型的なパターンは自動的に`preferPeriodMark`に置き換える\n            // 例) \".\" であるなら \"。\"に変換\n            if (classicPeriodMarkPattern.test(periodMark)) {\n                report(lastNode, new RuleError(`文末が\"${preferPeriodMark}\"で終わっていません。`, {\n                    index: index,\n                    fix: fixer.replaceTextRange([index, index + preferPeriodMark.length], preferPeriodMark)\n                }));\n            } else {\n                // 句点を忘れているパターン\n                if (forceAppendPeriod) {\n                    // `forceAppendPeriod`のオプションがtrueならば、自動で句点を追加する。\n                    report(lastNode, new RuleError(`文末が\"${preferPeriodMark}\"で終わっていません。`, {\n                        index: index,\n                        fix: fixer.replaceTextRange([index + 1, index + 1], preferPeriodMark)\n                    }));\n                } else {\n                    report(lastNode, new RuleError(`文末が\"${preferPeriodMark}\"で終わっていません。`, {\n                        index: index\n                    }));\n                }\n            }\n        }\n    }\n};\n\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"]}